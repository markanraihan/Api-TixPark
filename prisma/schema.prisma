generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  staff
  admin
}

enum BookingStatus {
  reserved     // Booking dibuat tapi belum check-in
  active       // Sedang digunakan (sudah check-in)
  completed    // Selesai (sudah check-out dan dibayar)
  cancelled    // Dibatalkan sebelum check-in
}

model User {
  user_id          String     @id @default(uuid())
  name             String     
  email            String     @unique
  password         String     
  whatsapp         String     @unique
  license_plate    String?    
  role             Role       @default(user)
  bookings         Booking[]  
  payments         Payment[]  // Add this line for the inverse relation
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@map("users")
}

model Parking {
  parking_id       String     @id @default(uuid())
  name             String     
  address          String     
  latitude         Float?
  longitude        Float?
  total_slots      Int        
  hourly_rate      Float      @default(5000)
  min_rate         Float      @default(2000)
  is_active        Boolean    @default(true)
  slots            Slot[]     
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt

  @@map("parkings")
}

model Slot {
  slot_id          String      @id @default(uuid())
  parking_id       String
  parking          Parking     @relation(fields: [parking_id], references: [parking_id])
  slot_number      Int         // Changed from slot_code to slot_number
  is_available     Boolean     @default(true)
  vehicle_type     String      @default("car")
  bookings         Booking[]
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  @@unique([parking_id, slot_number])  // Ensure slot numbers are unique per parking
  @@index([is_available])
  @@map("slots")
}

model Booking {
  booking_id       String      @id @default(uuid())
  booking_code     String      @unique
  user_id          String      
  user             User        @relation(fields: [user_id], references: [user_id])
  slot_id          String      
  slot             Slot        @relation(fields: [slot_id], references: [slot_id])
  vehicle_type     String      @default("car")
  license_plate    String      
  reserve_time     DateTime    
  check_in_time    DateTime?   
  check_out_time   DateTime?   
  status           BookingStatus @default(reserved)
  payment          Payment?    
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  @@index([booking_code])
  @@index([status])
  @@map("bookings")
}

model Payment {
  payment_id       String      @id @default(uuid())
  booking_id       String      @unique
  booking          Booking     @relation(fields: [booking_id], references: [booking_id])
  amount           Float       
  duration_minutes Int         
  payment_method   String      @default("cash")
  staff_id         String      
  staff            User?       @relation(fields: [staff_id], references: [user_id])
  paid_at          DateTime    
  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt

  @@map("payments")
}